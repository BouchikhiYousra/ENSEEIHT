
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "results/plot_mon_uncertainty_propagation.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_results_plot_mon_uncertainty_propagation.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_results_plot_mon_uncertainty_propagation.py:


LH2pac Uncertainty propagation
=======================

In this section,
we will propagate uncertainties through a discipline

.. GENERATED FROM PYTHON SOURCE LINES 8-20

.. code-block:: default

    from gemseo.api import configure_logger
    from importlib.metadata import distribution
    from gemseo.api import create_surrogate
    from gemseo_mlearning.api import sample_discipline
    from discipline import H2TurboFan
    from plot_mon_uncertain_space import lh2pacUncertainSpace
    from gemseo.uncertainty.api import create_statistics
    from gemseo_mlearning.api import sample_discipline
    from matplotlib import pyplot as plt
    from gemseo.mlearning.qual_measure.r2_measure import R2Measure
    import numpy as np








.. GENERATED FROM PYTHON SOURCE LINES 21-23

.. code-block:: default

    configure_logger()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <RootLogger root (INFO)>



.. GENERATED FROM PYTHON SOURCE LINES 24-27

In this first section we want to do some statistics on the dataset sampeled with the real model
Firstly,
we call the lh2pac uncertain space

.. GENERATED FROM PYTHON SOURCE LINES 27-29

.. code-block:: default

    uncertain_space = lh2pacUncertainSpace()








.. GENERATED FROM PYTHON SOURCE LINES 30-32

We compute the variation coefficient of the input parameters so that we can compare
them to those of the output parameters

.. GENERATED FROM PYTHON SOURCE LINES 32-40

.. code-block:: default

    names = ["tgi","tvi","sfc","mass","drag"]
    dic = {}
    print ("{:<8} {:<15}".format('Feature', 'Variation_coef %'))
    for name in names:
        distribution = uncertain_space.distributions[name]
        print(name, "     ", distribution.standard_deviation / distribution.mean * 100)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Feature  Variation_coef %
    tgi       [4.35662703]
    tvi       [1.35177731]
    sfc       [0.84420853]
    mass       [0.84420853]
    drag       [0.84420853]




.. GENERATED FROM PYTHON SOURCE LINES 41-43

Then,
we call the discipline H2TurboFan:

.. GENERATED FROM PYTHON SOURCE LINES 43-45

.. code-block:: default

    discipline = H2TurboFan()








.. GENERATED FROM PYTHON SOURCE LINES 46-48

Thirdly,
we sample the discipline with a Monte Carlo algorithm:

.. GENERATED FROM PYTHON SOURCE LINES 48-51

.. code-block:: default

    dataset = sample_discipline(discipline, uncertain_space, output_names=["mtow"], algo_name="OT_MONTE_CARLO", n_samples=30)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

        INFO - 13:54:42:  
        INFO - 13:54:42: *** Start DOEScenario execution ***
        INFO - 13:54:42: DOEScenario
        INFO - 13:54:42:    Disciplines: H2TurboFan
        INFO - 13:54:42:    MDO formulation: DisciplinaryOpt
        INFO - 13:54:42: Optimization problem:
        INFO - 13:54:42:    minimize mtow(tgi, tvi, sfc, mass, drag)
        INFO - 13:54:42:    with respect to drag, mass, sfc, tgi, tvi
        INFO - 13:54:42:    over the design space:
        INFO - 13:54:42:    |                                                Parameter space                                                |
        INFO - 13:54:42:    +------+-------------+--------------------+-------------+-------+-----------------------------------------------+
        INFO - 13:54:42:    | name | lower_bound |       value        | upper_bound | type  |              Initial distribution             |
        INFO - 13:54:42:    +------+-------------+--------------------+-------------+-------+-----------------------------------------------+
        INFO - 13:54:42:    | tgi  |     0.25    |       0.285        |    0.305    | float | Triangular(lower=0.25, mode=0.3, upper=0.305) |
        INFO - 13:54:42:    | tvi  |     0.8     | 0.8316666666666667 |     0.85    | float | Triangular(lower=0.8, mode=0.845, upper=0.85) |
        INFO - 13:54:42:    | sfc  |     0.99    | 1.006666666666667  |     1.03    | float |  Triangular(lower=0.99, mode=1.0, upper=1.03) |
        INFO - 13:54:42:    | mass |     0.99    | 1.006666666666667  |     1.03    | float |  Triangular(lower=0.99, mode=1.0, upper=1.03) |
        INFO - 13:54:42:    | drag |     0.99    | 1.006666666666667  |     1.03    | float |  Triangular(lower=0.99, mode=1.0, upper=1.03) |
        INFO - 13:54:42:    +------+-------------+--------------------+-------------+-------+-----------------------------------------------+
        INFO - 13:54:42: Solving optimization problem with algorithm OT_MONTE_CARLO:
        INFO - 13:54:42: Generation of OT_MONTE_CARLO DOE with OpenTURNS
        INFO - 13:54:42: ...   0%|          | 0/30 [00:00<?, ?it]
        INFO - 13:54:43: ...   3%|▎         | 1/30 [00:00<00:00, 43.30 it/sec, obj=8.55e+4]
        INFO - 13:54:44: ...   7%|▋         | 2/30 [00:01<00:01, 22.27 it/sec, obj=8.83e+4]
        INFO - 13:54:44: ...  10%|█         | 3/30 [00:01<00:01, 15.50 it/sec, obj=8.5e+4]
        INFO - 13:54:45: ...  13%|█▎        | 4/30 [00:02<00:02, 11.62 it/sec, obj=8.94e+4]
        INFO - 13:54:45: ...  17%|█▋        | 5/30 [00:03<00:02,  9.28 it/sec, obj=8.5e+4]
        INFO - 13:54:46: ...  20%|██        | 6/30 [00:03<00:03,  7.70 it/sec, obj=8.95e+4]
        INFO - 13:54:47: ...  23%|██▎       | 7/30 [00:04<00:03,  6.60 it/sec, obj=8.69e+4]
        INFO - 13:54:47: ...  27%|██▋       | 8/30 [00:05<00:03,  5.78 it/sec, obj=8.77e+4]
        INFO - 13:54:48: ...  30%|███       | 9/30 [00:05<00:04,  5.12 it/sec, obj=8.52e+4]
        INFO - 13:54:49: ...  33%|███▎      | 10/30 [00:06<00:04,  4.61 it/sec, obj=8.67e+4]
        INFO - 13:54:49: ...  37%|███▋      | 11/30 [00:07<00:04,  4.19 it/sec, obj=8.41e+4]
        INFO - 13:54:50: ...  40%|████      | 12/30 [00:07<00:04,  3.83 it/sec, obj=8.8e+4]
        INFO - 13:54:51: ...  43%|████▎     | 13/30 [00:08<00:04,  3.54 it/sec, obj=8.52e+4]
        INFO - 13:54:51: ...  47%|████▋     | 14/30 [00:09<00:04,  3.32 it/sec, obj=8.62e+4]
        INFO - 13:54:52: ...  50%|█████     | 15/30 [00:09<00:04,  3.10 it/sec, obj=9.03e+4]
        INFO - 13:54:53: ...  53%|█████▎    | 16/30 [00:10<00:04,  2.90 it/sec, obj=8.73e+4]
        INFO - 13:54:53: ...  57%|█████▋    | 17/30 [00:10<00:04,  2.74 it/sec, obj=8.62e+4]
        INFO - 13:54:54: ...  60%|██████    | 18/30 [00:11<00:04,  2.59 it/sec, obj=9.08e+4]
        INFO - 13:54:54: ...  63%|██████▎   | 19/30 [00:12<00:04,  2.45 it/sec, obj=8.4e+4]
        INFO - 13:54:55: ...  67%|██████▋   | 20/30 [00:12<00:04,  2.33 it/sec, obj=8.83e+4]
        INFO - 13:54:56: ...  70%|███████   | 21/30 [00:13<00:04,  2.22 it/sec, obj=8.63e+4]
        INFO - 13:54:56: ...  73%|███████▎  | 22/30 [00:14<00:03,  2.12 it/sec, obj=8.58e+4]
        INFO - 13:54:57: ...  77%|███████▋  | 23/30 [00:14<00:03,  2.02 it/sec, obj=8.74e+4]
        INFO - 13:54:58: ...  80%|████████  | 24/30 [00:15<00:03,  1.94 it/sec, obj=8.4e+4]
        INFO - 13:54:58: ...  83%|████████▎ | 25/30 [00:16<00:02,  1.86 it/sec, obj=8.75e+4]
        INFO - 13:54:59: ...  87%|████████▋ | 26/30 [00:16<00:02,  1.79 it/sec, obj=8.71e+4]
        INFO - 13:55:00: ...  90%|█████████ | 27/30 [00:17<00:01,  1.72 it/sec, obj=9.05e+4]
        INFO - 13:55:00: ...  93%|█████████▎| 28/30 [00:18<00:01,  1.66 it/sec, obj=9.05e+4]
        INFO - 13:55:01: ...  97%|█████████▋| 29/30 [00:18<00:00,  1.60 it/sec, obj=8.63e+4]
        INFO - 13:55:02: ... 100%|██████████| 30/30 [00:19<00:00,  1.55 it/sec, obj=8.45e+4]
        INFO - 13:55:02: ... 100%|██████████| 30/30 [00:19<00:00,  1.55 it/sec, obj=8.45e+4]
        INFO - 13:55:02: Optimization result:
        INFO - 13:55:02:    Optimizer info:
        INFO - 13:55:02:       Status: None
        INFO - 13:55:02:       Message: None
        INFO - 13:55:02:       Number of calls to the objective function by the optimizer: 30
        INFO - 13:55:02:    Solution:
        INFO - 13:55:02:       Objective: 84010.46442896119
        INFO - 13:55:02:       +---------------------------------------------------------------------------------------------------------------+
        INFO - 13:55:02:       |                                                Parameter space                                                |
        INFO - 13:55:02:       +------+-------------+--------------------+-------------+-------+-----------------------------------------------+
        INFO - 13:55:02:       | name | lower_bound |       value        | upper_bound | type  |              Initial distribution             |
        INFO - 13:55:02:       +------+-------------+--------------------+-------------+-------+-----------------------------------------------+
        INFO - 13:55:02:       | tgi  |     0.25    | 0.3017054683707981 |    0.305    | float | Triangular(lower=0.25, mode=0.3, upper=0.305) |
        INFO - 13:55:02:       | tvi  |     0.8     | 0.8448759300814355 |     0.85    | float | Triangular(lower=0.8, mode=0.845, upper=0.85) |
        INFO - 13:55:02:       | sfc  |     0.99    | 0.9953857965497805 |     1.03    | float |  Triangular(lower=0.99, mode=1.0, upper=1.03) |
        INFO - 13:55:02:       | mass |     0.99    | 1.000195199673554  |     1.03    | float |  Triangular(lower=0.99, mode=1.0, upper=1.03) |
        INFO - 13:55:02:       | drag |     0.99    | 1.002552378109875  |     1.03    | float |  Triangular(lower=0.99, mode=1.0, upper=1.03) |
        INFO - 13:55:02:       +------+-------------+--------------------+-------------+-------+-----------------------------------------------+
        INFO - 13:55:02: *** End DOEScenario execution (time: 0:00:19.341420) ***




.. GENERATED FROM PYTHON SOURCE LINES 52-55

Lastly,
we create a statistics object to estimate statistics,
such as mean, variance and variation coefficient on the dataset:

.. GENERATED FROM PYTHON SOURCE LINES 55-65

.. code-block:: default

    statistics = create_statistics(dataset)
    mean = statistics.compute_mean()
    variance = statistics.compute_standard_deviation()
    cv = statistics.compute_variation_coefficient()
    names = ["tgi","tvi","sfc","mass","drag", "mtow"]
    print ("{:<8} {:<15} {:<10} {:<10}".format('Feature','Mean','std','Variation_coefficient %'))
    for name in names:
        print("{:<8} {:<15} {:<10} {:<10}".format(name, "{:.2f}".format(mean[name][0]),\
             "{:.2f}".format(np.sqrt(variance[name][0])),"{:.2f}".format(cv[name][0]*100)))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

        INFO - 13:55:02: Create H2TurboFan, a EmpiricalStatistics library.
    Feature  Mean            std        Variation_coefficient %
    tgi      0.28            0.12       4.92      
    tvi      0.83            0.11       1.39      
    sfc      1.01            0.09       0.86      
    mass     1.00            0.09       0.83      
    drag     1.01            0.09       0.89      
    mtow     86978.95        44.76      2.30      




.. GENERATED FROM PYTHON SOURCE LINES 66-68

In this second section we want to do some statistics on the dataset sampeled with the surrogate model of the uncertain space
so we can compare them with those of the dataset sampeled with the uncertain model 

.. GENERATED FROM PYTHON SOURCE LINES 68-71

.. code-block:: default

    surrogate_discipline = create_surrogate("LinearRegressor", dataset)
    surrogate_dataset = sample_discipline(surrogate_discipline, uncertain_space, output_names=["mtow"], algo_name="OT_MONTE_CARLO", n_samples=10000)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

        INFO - 13:55:02: Build the surrogate discipline: LinReg_H2TurboFan
        INFO - 13:55:02:    Dataset name: H2TurboFan
        INFO - 13:55:02:    Dataset size: 30
        INFO - 13:55:02:    Surrogate model: LinearRegressor
        INFO - 13:55:02: Use the surrogate discipline: LinReg_H2TurboFan
        INFO - 13:55:02:    Inputs: drag, mass, sfc, tgi, tvi
        INFO - 13:55:02:    Outputs: mtow
        INFO - 13:55:02:    Jacobian: use surrogate model jacobian
        INFO - 13:55:02:  
        INFO - 13:55:02: *** Start DOEScenario execution ***
        INFO - 13:55:02: DOEScenario
        INFO - 13:55:02:    Disciplines: Surrogate discipline: LinReg_H2TurboFan
        INFO - 13:55:02:    Dataset name: H2TurboFan
        INFO - 13:55:02:    Dataset size: 30
        INFO - 13:55:02:    Surrogate model: LinearRegressor
        INFO - 13:55:02:    Inputs: drag, mass, sfc, tgi, tvi
        INFO - 13:55:02:    Outputs: mtow
        INFO - 13:55:02:    MDO formulation: DisciplinaryOpt
        INFO - 13:55:02: Optimization problem:
        INFO - 13:55:02:    minimize mtow(tgi, tvi, sfc, mass, drag)
        INFO - 13:55:02:    with respect to drag, mass, sfc, tgi, tvi
        INFO - 13:55:02:    over the design space:
        INFO - 13:55:02:    |                                                Parameter space                                                |
        INFO - 13:55:02:    +------+-------------+--------------------+-------------+-------+-----------------------------------------------+
        INFO - 13:55:02:    | name | lower_bound |       value        | upper_bound | type  |              Initial distribution             |
        INFO - 13:55:02:    +------+-------------+--------------------+-------------+-------+-----------------------------------------------+
        INFO - 13:55:02:    | tgi  |     0.25    | 0.3017054683707981 |    0.305    | float | Triangular(lower=0.25, mode=0.3, upper=0.305) |
        INFO - 13:55:02:    | tvi  |     0.8     | 0.8448759300814355 |     0.85    | float | Triangular(lower=0.8, mode=0.845, upper=0.85) |
        INFO - 13:55:02:    | sfc  |     0.99    | 0.9953857965497805 |     1.03    | float |  Triangular(lower=0.99, mode=1.0, upper=1.03) |
        INFO - 13:55:02:    | mass |     0.99    | 1.000195199673554  |     1.03    | float |  Triangular(lower=0.99, mode=1.0, upper=1.03) |
        INFO - 13:55:02:    | drag |     0.99    | 1.002552378109875  |     1.03    | float |  Triangular(lower=0.99, mode=1.0, upper=1.03) |
        INFO - 13:55:02:    +------+-------------+--------------------+-------------+-------+-----------------------------------------------+
        INFO - 13:55:02: Solving optimization problem with algorithm OT_MONTE_CARLO:
        INFO - 13:55:02: Generation of OT_MONTE_CARLO DOE with OpenTURNS
        INFO - 13:55:02: ...   0%|          | 0/10000 [00:00<?, ?it]
        INFO - 13:55:02: ...   4%|▍         | 377/10000 [00:00<00:00, 99926.48 it/sec, obj=8.82e+4]
        INFO - 13:55:02: ...   8%|▊         | 760/10000 [00:00<00:00, 49965.74 it/sec, obj=8.49e+4]
        INFO - 13:55:02: ...  11%|█▏        | 1145/10000 [00:00<00:00, 33304.59 it/sec, obj=8.86e+4]
        INFO - 13:55:02: ...  15%|█▌        | 1533/10000 [00:00<00:00, 24968.03 it/sec, obj=8.48e+4]
        INFO - 13:55:02: ...  19%|█▉        | 1918/10000 [00:00<00:00, 19978.77 it/sec, obj=8.67e+4]
        INFO - 13:55:02: ...  23%|██▎       | 2305/10000 [00:00<00:00, 16647.22 it/sec, obj=8.66e+4]
        INFO - 13:55:02: ...  27%|██▋       | 2691/10000 [00:00<00:00, 14252.14 it/sec, obj=8.83e+4]
        INFO - 13:55:02: ...  31%|███       | 3076/10000 [00:00<00:00, 12385.42 it/sec, obj=8.7e+4]
        INFO - 13:55:03: ...  35%|███▍      | 3462/10000 [00:00<00:00, 11018.36 it/sec, obj=8.6e+4]
        INFO - 13:55:03: ...  38%|███▊      | 3847/10000 [00:01<00:00, 9924.66 it/sec, obj=8.79e+4]
        INFO - 13:55:03: ...  42%|████▏     | 4233/10000 [00:01<00:00, 9027.82 it/sec, obj=8.59e+4]
        INFO - 13:55:03: ...  46%|████▌     | 4618/10000 [00:01<00:00, 8279.01 it/sec, obj=8.84e+4]
        INFO - 13:55:03: ...  50%|█████     | 5004/10000 [00:01<00:00, 7645.06 it/sec, obj=8.62e+4]
        INFO - 13:55:03: ...  54%|█████▍    | 5389/10000 [00:01<00:00, 7100.92 it/sec, obj=8.94e+4]
        INFO - 13:55:03: ...  58%|█████▊    | 5777/10000 [00:01<00:00, 6629.00 it/sec, obj=8.76e+4]
        INFO - 13:55:03: ...  62%|██████▏   | 6164/10000 [00:01<00:00, 6216.58 it/sec, obj=8.68e+4]
        INFO - 13:55:03: ...  66%|██████▌   | 6552/10000 [00:01<00:00, 5852.62 it/sec, obj=8.62e+4]
        INFO - 13:55:03: ...  69%|██████▉   | 6939/10000 [00:01<00:00, 5527.22 it/sec, obj=8.46e+4]
        INFO - 13:55:04: ...  73%|███████▎  | 7326/10000 [00:01<00:00, 5237.15 it/sec, obj=8.61e+4]
        INFO - 13:55:04: ...  77%|███████▋  | 7714/10000 [00:02<00:00, 4976.04 it/sec, obj=8.59e+4]
        INFO - 13:55:04: ...  81%|████████  | 8101/10000 [00:02<00:00, 4739.87 it/sec, obj=8.58e+4]
        INFO - 13:55:04: ...  85%|████████▍ | 8489/10000 [00:02<00:00, 4524.95 it/sec, obj=8.46e+4]
        INFO - 13:55:04: ...  89%|████████▉ | 8878/10000 [00:02<00:00, 4328.74 it/sec, obj=8.55e+4]
        INFO - 13:55:04: ...  93%|█████████▎| 9266/10000 [00:02<00:00, 4148.69 it/sec, obj=8.46e+4]
        INFO - 13:55:04: ...  97%|█████████▋| 9654/10000 [00:02<00:00, 3948.99 it/sec, obj=8.56e+4]
        INFO - 13:55:04: ... 100%|██████████| 10000/10000 [00:02<00:00, 3767.52 it/sec, obj=8.5e+4]
        INFO - 13:55:04: Optimization result:
        INFO - 13:55:04:    Optimizer info:
        INFO - 13:55:04:       Status: None
        INFO - 13:55:04:       Message: None
        INFO - 13:55:04:       Number of calls to the objective function by the optimizer: 10000
        INFO - 13:55:04:    Solution:
        INFO - 13:55:04:       Objective: 83472.93547681626
        INFO - 13:55:04:       +---------------------------------------------------------------------------------------------------------------+
        INFO - 13:55:04:       |                                                Parameter space                                                |
        INFO - 13:55:04:       +------+-------------+--------------------+-------------+-------+-----------------------------------------------+
        INFO - 13:55:04:       | name | lower_bound |       value        | upper_bound | type  |              Initial distribution             |
        INFO - 13:55:04:       +------+-------------+--------------------+-------------+-------+-----------------------------------------------+
        INFO - 13:55:04:       | tgi  |     0.25    | 0.3044356102435009 |    0.305    | float | Triangular(lower=0.25, mode=0.3, upper=0.305) |
        INFO - 13:55:04:       | tvi  |     0.8     | 0.8418054983658113 |     0.85    | float | Triangular(lower=0.8, mode=0.845, upper=0.85) |
        INFO - 13:55:04:       | sfc  |     0.99    | 1.002194748777637  |     1.03    | float |  Triangular(lower=0.99, mode=1.0, upper=1.03) |
        INFO - 13:55:04:       | mass |     0.99    | 0.9975471293866556 |     1.03    | float |  Triangular(lower=0.99, mode=1.0, upper=1.03) |
        INFO - 13:55:04:       | drag |     0.99    | 0.9940890586875339 |     1.03    | float |  Triangular(lower=0.99, mode=1.0, upper=1.03) |
        INFO - 13:55:04:       +------+-------------+--------------------+-------------+-------+-----------------------------------------------+
        INFO - 13:55:04: *** End DOEScenario execution (time: 0:00:02.811367) ***




.. GENERATED FROM PYTHON SOURCE LINES 72-79

.. code-block:: default

    r2 = R2Measure(surrogate_discipline.regression_model, True)
    print('\n')
    print('\n')
    print("R2: learning measure = \n", r2.evaluate_learn())  # learning measure
    print("R2: k-folds cross-validation measure = \n", r2.evaluate_kfolds())  # k-folds cross-validation measure
    #The R2 learning measure equals to 0.997, hence the linear regression is a good fit for the surrogate model.





.. rst-class:: sphx-glr-script-out

 .. code-block:: none





    R2: learning measure = 
     [0.99705542]
    R2: k-folds cross-validation measure = 
     [0.99469508]




.. GENERATED FROM PYTHON SOURCE LINES 80-82

we create an object to estimate statistics,
such as mean and variance on the new dataset:

.. GENERATED FROM PYTHON SOURCE LINES 82-92

.. code-block:: default

    surrogate_statistics = create_statistics(surrogate_dataset)
    s_mean = surrogate_statistics.compute_mean()
    s_variance = surrogate_statistics.compute_standard_deviation()
    s_cv = surrogate_statistics.compute_variation_coefficient()
    names = ["tgi","tvi","sfc","mass","drag", "mtow"]
    print ("{:<8} {:<15} {:<10} {:<10}".format('Feature','Mean','std','Variation_coefficient %'))
    for name in names:
        print("{:<8} {:<15} {:<10} {:<10}".format(name, "{:.2f}".format(s_mean[name][0]),\
             "{:.2f}".format(np.sqrt(s_variance[name][0])),"{:.2f}".format(s_cv[name][0]*100)))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

        INFO - 13:55:04: Create LinReg_H2TurboFan, a EmpiricalStatistics library.
    Feature  Mean            std        Variation_coefficient %
    tgi      0.29            0.11       4.34      
    tvi      0.83            0.11       1.35      
    sfc      1.01            0.09       0.84      
    mass     1.01            0.09       0.84      
    drag     1.01            0.09       0.85      
    mtow     86812.50        40.85      1.92      





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  22.185 seconds)


.. _sphx_glr_download_results_plot_mon_uncertainty_propagation.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_mon_uncertainty_propagation.py <plot_mon_uncertainty_propagation.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_mon_uncertainty_propagation.ipynb <plot_mon_uncertainty_propagation.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
