
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/plot_surrogate.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_plot_surrogate.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_plot_surrogate.py:


Surrogate model
===============

In this example,
we will build a surrogate model of the Rosenbrock function
and a constraint related to an Rosenbrock-based optimization problem.

.. GENERATED FROM PYTHON SOURCE LINES 9-17

.. code-block:: default

    from gemseo.api import create_design_space
    from gemseo.api import create_discipline
    from gemseo.api import create_surrogate
    from gemseo.api import import_discipline
    from gemseo.mlearning.qual_measure.r2_measure import R2Measure
    from gemseo.mlearning.qual_measure.rmse_measure import RMSEMeasure
    from gemseo_mlearning.api import sample_discipline








.. GENERATED FROM PYTHON SOURCE LINES 18-21

Firstly,
we define the discipline computing the Rosenbrock function
and the Euclidean distance to the optimum:

.. GENERATED FROM PYTHON SOURCE LINES 21-29

.. code-block:: default

    from numpy import array

    discipline = create_discipline(
        "AnalyticDiscipline",
        expressions={"z": "(1-x)**2+100*(y-x**2)**2", "c": "((x-1)**2+(y-1)**2)**0.5"},
        name="Rosenbrock"
    )








.. GENERATED FROM PYTHON SOURCE LINES 30-31

Then, we create the design space:

.. GENERATED FROM PYTHON SOURCE LINES 31-35

.. code-block:: default

    design_space = create_design_space()
    design_space.add_variable("x", l_b=-2., u_b=2., value=0.)
    design_space.add_variable("y", l_b=-2., u_b=2., value=0.)








.. GENERATED FROM PYTHON SOURCE LINES 36-38

Then,
we sample the discipline with an optimal LHS:

.. GENERATED FROM PYTHON SOURCE LINES 38-40

.. code-block:: default

    dataset = sample_discipline(discipline, design_space, ["z", "c"], "OT_OPT_LHS", 30)








.. GENERATED FROM PYTHON SOURCE LINES 41-42

before creating a surrogate discipline:

.. GENERATED FROM PYTHON SOURCE LINES 42-44

.. code-block:: default

    surrogate_discipline = create_surrogate("RBFRegressor", dataset)








.. GENERATED FROM PYTHON SOURCE LINES 45-46

and using it for prediction:

.. GENERATED FROM PYTHON SOURCE LINES 46-49

.. code-block:: default

    surrogate_discipline.execute({"x": array([1.])})
    print(surrogate_discipline.cache.last_entry)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    CacheEntry(inputs={'x': array([1.]), 'y': array([0.01176985])}, outputs={'c': array([0.95861794]), 'z': array([97.71890412])}, jacobian={})




.. GENERATED FROM PYTHON SOURCE LINES 50-53

This surrogate discipline can be used in a scenario.
The underlying regression model can also be assessed,
with the R2 measure for instance:

.. GENERATED FROM PYTHON SOURCE LINES 53-57

.. code-block:: default

    r2 = R2Measure(surrogate_discipline.regression_model, True)
    print(r2.evaluate_learn())  # learning measure
    print(r2.evaluate_kfolds())  # k-folds cross-validation measure





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [1. 1.]
    [0.99761202 0.82477247]




.. GENERATED FROM PYTHON SOURCE LINES 58-59

or with the root mean squared error:

.. GENERATED FROM PYTHON SOURCE LINES 59-67

.. code-block:: default

    rmse = RMSEMeasure(surrogate_discipline.regression_model, True)
    print(rmse.evaluate_learn())
    print(rmse.evaluate_kfolds())

    surrogate_discipline.serialize("my_surrogate.pkl")

    discipline = import_discipline("my_surrogate.pkl")
    discipline.execute({"x": array([1.])})
    print(discipline.get_output_data())



.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [1.11483936e-15 2.57850552e-12]
    [4.48459644e-02 2.47187197e+02]
    {'c': array([0.95861794]), 'z': array([97.71890412])}





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.231 seconds)


.. _sphx_glr_download_examples_plot_surrogate.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_surrogate.py <plot_surrogate.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_surrogate.ipynb <plot_surrogate.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
