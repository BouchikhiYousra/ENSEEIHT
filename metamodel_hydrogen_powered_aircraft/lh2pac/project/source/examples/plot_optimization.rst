
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/plot_optimization.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_plot_optimization.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_plot_optimization.py:


Optimization
============

We want to minimize the Rosenbrock function :math:`f(x,y)=(1-x)^2+100(y-x**2)^2`
over the domain :math:`[-2,2]^2`

.. GENERATED FROM PYTHON SOURCE LINES 9-15

.. code-block:: default

    from gemseo.api import configure_logger
    from gemseo.api import create_design_space
    from gemseo.api import create_discipline
    from gemseo.api import create_scenario
    from matplotlib import pyplot as plt








.. GENERATED FROM PYTHON SOURCE LINES 16-18

Before starting,
we activate the logger as an optimization process logs meaningful information.

.. GENERATED FROM PYTHON SOURCE LINES 18-20

.. code-block:: default

    configure_logger()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <RootLogger root (INFO)>



.. GENERATED FROM PYTHON SOURCE LINES 21-24

Firstly,
we define the discipline computing the Rosenbrock function
and the Euclidean distance to the optimum:

.. GENERATED FROM PYTHON SOURCE LINES 24-30

.. code-block:: default

    discipline = create_discipline(
        "AnalyticDiscipline",
        expressions={"z": "(1-x)**2+100*(y-x**2)**2", "c": "((x-1)**2+(y-1)**2)**0.5"},
        name="Rosenbrock"
    )








.. GENERATED FROM PYTHON SOURCE LINES 31-32

Then, we create the design space:

.. GENERATED FROM PYTHON SOURCE LINES 32-36

.. code-block:: default

    design_space = create_design_space()
    design_space.add_variable("x", l_b=-2., u_b=2., value=0.)
    design_space.add_variable("y", l_b=-2., u_b=2., value=0.)








.. GENERATED FROM PYTHON SOURCE LINES 37-43

Thirdly,
we put these elements together in a scenario
to minimize the Rosenbrock function
under the constraint that the distance
between the design point and the solution of the unconstrained problem
is greater or equal to 1.

.. GENERATED FROM PYTHON SOURCE LINES 43-46

.. code-block:: default

    scenario = create_scenario([discipline], "DisciplinaryOpt", "z", design_space)
    scenario.add_constraint("c", constraint_type="ineq", positive=True, value=1.)








.. GENERATED FROM PYTHON SOURCE LINES 47-53

.. note::
   GEMSEO is a Python library dedicated to multidisciplinary design optimization (MDO)
   based on the notion of MDO formulation.
   This is why the second positional argument ``formulation`` is mandatory.
   But when using the scenario with a unique discipline,
   don't bother and consider ``"DisciplinaryOpt"``.

.. GENERATED FROM PYTHON SOURCE LINES 55-56

before executing it with a gradient-free optimizer:

.. GENERATED FROM PYTHON SOURCE LINES 56-58

.. code-block:: default

    scenario.execute({"algo": "NLOPT_COBYLA", "max_iter": 100})





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

        INFO - 21:38:55:  
        INFO - 21:38:55: *** Start MDOScenario execution ***
        INFO - 21:38:55: MDOScenario
        INFO - 21:38:55:    Disciplines: Rosenbrock
        INFO - 21:38:55:    MDO formulation: DisciplinaryOpt
        INFO - 21:38:55: Optimization problem:
        INFO - 21:38:55:    minimize z(x, y)
        INFO - 21:38:55:    with respect to x, y
        INFO - 21:38:55:    subject to constraints:
        INFO - 21:38:55:       c(x, y) >= 1.0
        INFO - 21:38:55:    over the design space:
        INFO - 21:38:55:    +------+-------------+-------+-------------+-------+
        INFO - 21:38:55:    | name | lower_bound | value | upper_bound | type  |
        INFO - 21:38:55:    +------+-------------+-------+-------------+-------+
        INFO - 21:38:55:    | x    |      -2     |   0   |      2      | float |
        INFO - 21:38:55:    | y    |      -2     |   0   |      2      | float |
        INFO - 21:38:55:    +------+-------------+-------+-------------+-------+
        INFO - 21:38:55: Solving optimization problem with algorithm NLOPT_COBYLA:
        INFO - 21:38:55: ...   0%|          | 0/100 [00:00<?, ?it]
        INFO - 21:38:55: ... 100%|██████████| 100/100 [00:00<00:00, 1760.63 it/sec, obj=0.328]
        INFO - 21:38:55: Optimization result:
        INFO - 21:38:55:    Optimizer info:
        INFO - 21:38:55:       Status: None
        INFO - 21:38:55:       Message: Maximum number of iterations reached. GEMSEO Stopped the driver
        INFO - 21:38:55:       Number of calls to the objective function by the optimizer: 102
        INFO - 21:38:55:    Solution:
        INFO - 21:38:55:       The solution is feasible.
        INFO - 21:38:55:       Objective: 0.3283010611441774
        INFO - 21:38:55:       Standardized constraints:
        INFO - 21:38:55:          -c + 1.0 = 6.591815177348082e-05
        INFO - 21:38:55:       Design space:
        INFO - 21:38:55:       +------+-------------+--------------------+-------------+-------+
        INFO - 21:38:55:       | name | lower_bound |       value        | upper_bound | type  |
        INFO - 21:38:55:       +------+-------------+--------------------+-------------+-------+
        INFO - 21:38:55:       | x    |      -2     | 0.4281647812612155 |      2      | float |
        INFO - 21:38:55:       | y    |      -2     | 0.1797118490118108 |      2      | float |
        INFO - 21:38:55:       +------+-------------+--------------------+-------------+-------+
        INFO - 21:38:55: *** End MDOScenario execution (time: 0:00:00.062423) ***

    {'max_iter': 100, 'algo': 'NLOPT_COBYLA'}



.. GENERATED FROM PYTHON SOURCE LINES 59-61

Lastly,
we can plot the optimization history:

.. GENERATED FROM PYTHON SOURCE LINES 61-64

.. code-block:: default

    scenario.post_process("OptHistoryView", save=False, show=False)
    # Workaround for HTML rendering, instead of ``show=True``
    plt.show()



.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /examples/images/sphx_glr_plot_optimization_001.png
         :alt: Evolution of the optimization variables
         :srcset: /examples/images/sphx_glr_plot_optimization_001.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /examples/images/sphx_glr_plot_optimization_002.png
         :alt: Evolution of the objective value
         :srcset: /examples/images/sphx_glr_plot_optimization_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /examples/images/sphx_glr_plot_optimization_003.png
         :alt: Distance to the optimum
         :srcset: /examples/images/sphx_glr_plot_optimization_003.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /examples/images/sphx_glr_plot_optimization_004.png
         :alt: Evolution of the inequality constraints
         :srcset: /examples/images/sphx_glr_plot_optimization_004.png
         :class: sphx-glr-multi-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  1.675 seconds)


.. _sphx_glr_download_examples_plot_optimization.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_optimization.py <plot_optimization.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_optimization.ipynb <plot_optimization.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
