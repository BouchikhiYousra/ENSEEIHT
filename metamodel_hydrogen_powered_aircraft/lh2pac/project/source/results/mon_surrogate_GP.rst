
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "results/mon_surrogate_GP.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_results_mon_surrogate_GP.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_results_mon_surrogate_GP.py:


LH2pac Surrogate model
===============

In this example,
we will build a surrogate model for the H2TurboFan problem using
a Gaussian Process Regressor, and some constraints related to 
the optimization of this model.

.. GENERATED FROM PYTHON SOURCE LINES 12-24

.. code-block:: default

    from gemseo.api import create_scenario
    from gemseo.api import create_surrogate
    from gemseo.api import import_discipline
    from gemseo.mlearning.qual_measure.r2_measure import R2Measure
    from gemseo.mlearning.qual_measure.rmse_measure import RMSEMeasure
    from gemseo_mlearning.api import sample_discipline
    from discipline import H2TurboFan
    from mon_design_space import lh2pacDesignSpace
    from marilib.utils import unit
    import matplotlib.pyplot as plt
    from numpy import array


.. GENERATED FROM PYTHON SOURCE LINES 25-27

Firstly,
we instantiate the discipline

.. GENERATED FROM PYTHON SOURCE LINES 27-30

.. code-block:: default


    discipline = H2TurboFan()


.. GENERATED FROM PYTHON SOURCE LINES 31-32

Then, we instantiate the design space:

.. GENERATED FROM PYTHON SOURCE LINES 32-36

.. code-block:: default


    design_space = lh2pacDesignSpace()
    print(design_space)


.. GENERATED FROM PYTHON SOURCE LINES 37-39

Then,
we sample the discipline with an optimal LHS:

.. GENERATED FROM PYTHON SOURCE LINES 39-41

.. code-block:: default

    dataset = sample_discipline(discipline, design_space, output_names=["mtow","tofl","vapp", "vz_mcl","vz_mcr","oei_path","ttc","far"],algo_name= "OT_OPT_LHS", n_samples= 30)


.. GENERATED FROM PYTHON SOURCE LINES 42-43

before creating a surrogate discipline:

.. GENERATED FROM PYTHON SOURCE LINES 43-44

.. code-block:: default

    surrogate_discipline = create_surrogate("GaussianProcessRegressor", dataset)

.. GENERATED FROM PYTHON SOURCE LINES 45-46

and using it for prediction:

.. GENERATED FROM PYTHON SOURCE LINES 46-49

.. code-block:: default

    surrogate_discipline.execute({"x": array([1.])})
    print(surrogate_discipline.cache.last_entry)


.. GENERATED FROM PYTHON SOURCE LINES 50-51

optimization of the surrogate model

.. GENERATED FROM PYTHON SOURCE LINES 51-62

.. code-block:: default


    #first we create a scenario
    scenario = create_scenario([discipline], "DisciplinaryOpt", "mtow", design_space)
    scenario.add_constraint("tofl", "ineq", positive=False, value = 2200.)
    scenario.add_constraint("vapp", "ineq", positive=False, value = unit.mps_kt(137.))
    scenario.add_constraint("vz_mcl", "ineq", positive=True, value = unit.mps_ftpmin(300.)) #ftpmin_mps
    scenario.add_constraint("vz_mcr", "ineq", positive=True, value = unit.mps_ftpmin(0.))
    scenario.add_constraint("oei_path", "ineq", positive=True, value=0.0011)
    scenario.add_constraint("ttc", "ineq", positive=False, value=unit.s_min(25.)) # min_s
    scenario.add_constraint("far", "ineq", positive=False, value=13.4)


.. GENERATED FROM PYTHON SOURCE LINES 63-64

before executing it with a gradient-free optimizer:

.. GENERATED FROM PYTHON SOURCE LINES 64-66

.. code-block:: default

    scenario.execute({"algo": "NLOPT_COBYLA", "max_iter": 30})


.. GENERATED FROM PYTHON SOURCE LINES 67-69

Lastly,
we can plot the optimization history:

.. GENERATED FROM PYTHON SOURCE LINES 69-72

.. code-block:: default

    scenario.post_process("OptHistoryView", save=True, show=True, file_path="opt_history_GP")
    plt.show()


.. GENERATED FROM PYTHON SOURCE LINES 73-75

The underlying regression model can also be assessed,
with the R2 measure for instance:

.. GENERATED FROM PYTHON SOURCE LINES 75-80

.. code-block:: default

    r2 = R2Measure(surrogate_discipline.regression_model, True)
    print("r2 de l'evaluate_learn",r2.evaluate_learn())  # learning measure
    print("\n\n")
    print("r2 de l'evaluate_kfolds",r2.evaluate_kfolds())  # k-folds cross-validation measure
    print("\n\n")

.. GENERATED FROM PYTHON SOURCE LINES 81-82

or with the root mean squared error:

.. GENERATED FROM PYTHON SOURCE LINES 82-95

.. code-block:: default

    rmse = RMSEMeasure(surrogate_discipline.regression_model, True)
    print("rmse de evaluate_learn",rmse.evaluate_learn())
    print("\n\n")
    print("rmse de evaluate_kfolds",rmse.evaluate_kfolds())
    print("\n\n")

    surrogate_discipline.serialize("mon_surrogate.pkl")

    discipline = import_discipline("mon_surrogate.pkl")
    discipline.execute({"x": array([1.])})
    print(discipline.get_output_data())




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.000 seconds)


.. _sphx_glr_download_results_mon_surrogate_GP.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: mon_surrogate_GP.py <mon_surrogate_GP.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: mon_surrogate_GP.ipynb <mon_surrogate_GP.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
