
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "results/mon_sensitivity_analysis.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_results_mon_sensitivity_analysis.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_results_mon_sensitivity_analysis.py:


LH2pac Sensitivity analysis
====================

In this example,
we will use the Sobol' analysis to quantify the sensitivity of the surrogate model
to the uncertainty introduced in its input parameters:

.. GENERATED FROM PYTHON SOURCE LINES 9-20

.. code-block:: default

    from numpy import array
    from gemseo.api import create_surrogate
    from gemseo_mlearning.api import sample_discipline
    import pprint
    from gemseo.api import configure_logger
    from discipline import H2TurboFan
    from mon_uncertain_space import lh2pacUncertainSpace
    from gemseo.uncertainty.sensitivity.sobol.analysis import SobolAnalysis
    from matplotlib import pyplot as plt



.. GENERATED FROM PYTHON SOURCE LINES 21-23

Firstly,
we define the discipline computing the h2turbofan

.. GENERATED FROM PYTHON SOURCE LINES 23-26

.. code-block:: default


    discipline = H2TurboFan()


.. GENERATED FROM PYTHON SOURCE LINES 27-29

Then,
we instantiate the uncertain space:

.. GENERATED FROM PYTHON SOURCE LINES 29-31

.. code-block:: default

    uncertain_space = lh2pacUncertainSpace()


.. GENERATED FROM PYTHON SOURCE LINES 32-34

Thirdly,
we sample the discipline with a Monte Carlo algorithm:

.. GENERATED FROM PYTHON SOURCE LINES 34-37

.. code-block:: default

    dataset = sample_discipline(discipline, uncertain_space, output_names=["mtow"], algo_name="OT_MONTE_CARLO", n_samples=30)



.. GENERATED FROM PYTHON SOURCE LINES 38-39

Then we create a surrogate discipline:

.. GENERATED FROM PYTHON SOURCE LINES 39-41

.. code-block:: default

    surrogate_discipline = create_surrogate("RBFRegressor", dataset)


.. GENERATED FROM PYTHON SOURCE LINES 42-43

and use it for prediction:

.. GENERATED FROM PYTHON SOURCE LINES 43-45

.. code-block:: default

    surrogate_discipline.execute({"x": array([1.])})


.. GENERATED FROM PYTHON SOURCE LINES 46-48

From that,
we launch a Sobol' analysis with 10000 samples:

.. GENERATED FROM PYTHON SOURCE LINES 48-51

.. code-block:: default

    sobol = SobolAnalysis([surrogate_discipline], uncertain_space, 10000)
    sobol.compute_indices()


.. GENERATED FROM PYTHON SOURCE LINES 52-53

and print the results:

.. GENERATED FROM PYTHON SOURCE LINES 53-56

.. code-block:: default

    pprint.pprint(sobol.first_order_indices)
    pprint.pprint(sobol.total_order_indices)


.. GENERATED FROM PYTHON SOURCE LINES 57-58

We can also plot & visualize both first-order and total Sobol' indices:

.. GENERATED FROM PYTHON SOURCE LINES 58-60

.. code-block:: default

    sobol.plot("mtow", save=True, show=False)
    plt.show()


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.000 seconds)


.. _sphx_glr_download_results_mon_sensitivity_analysis.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: mon_sensitivity_analysis.py <mon_sensitivity_analysis.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: mon_sensitivity_analysis.ipynb <mon_sensitivity_analysis.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
